# 配置Sharding-JDBC的分片策略
# 配置数据源，给数据源起名g1,g2...此处可配置多数据源
#spring.shardingsphere.datasource.names=g1
# 配置数据源具体内容————————包含  连接池，  驱动，             地址，   用户名，    密码
# 由于上面配置数据源只有g1因此下面只配置g1.type,g1.driver-class-name,g1.url,g1.username,g1.password
#spring.shardingsphere.datasource.g1.type=com.alibaba.druid.pool.DruidDataSource
#spring.shardingsphere.datasource.g1.driver-class-name=com.mysql.cj.jdbc.Driver
#spring.shardingsphere.datasource.g1.url=jdbc:mysql://localhost:3306/goods_db?characterEncoding=utf-8&useUnicode=true&useSSL=false&serverTimezone=UTC
#spring.shardingsphere.datasource.g1.username=root
#spring.shardingsphere.datasource.g1.password=123456

# 配置表的分布，表的策略
#spring.shardingsphere.sharding.tables.goods.actual-data-nodes=g1.goods_$->{1..2}

# 指定goods表 主键id 生成策略为 SNOWFLAKE
#spring.shardingsphere.sharding.tables.goods.key-generator.column=id
#spring.shardingsphere.sharding.tables.goods.key-generator.type=SNOWFLAKE

# 指定分片策略 约定id值是偶数添加到goods_1表，如果id是奇数添加到goods_2表
#spring.shardingsphere.sharding.tables.goods.table-strategy.inline.sharding-column=id
#spring.shardingsphere.sharding.tables.goods.table-strategy.inline.algorithm-expression=goods_$->{id % 2 + 1}

# 打开sql输出日志
#spring.shardingsphere.props.sql.show=true

#spring.main.allow-bean-definition-overriding=true
###############################

# 配置Sharding-JDBC的分片策略
# 配置数据源，给数据源起名g1,g2...此处可配置多数据源
#spring.shardingsphere.datasource.names=g1,g2,u0

# 配置允许一个实体类映射多张表
#spring.main.allow-bean-definition-overriding=true

# 配置g1数据源具体内容————————包含  连接池，  驱动，             地址，   用户名，    密码
#                                 g1配置g1.type,g1.driver-class-name,g1.url,g1.username,g1.password
#spring.shardingsphere.datasource.g1.type=com.alibaba.druid.pool.DruidDataSource
#spring.shardingsphere.datasource.g1.driver-class-name=com.mysql.cj.jdbc.Driver
#spring.shardingsphere.datasource.g1.url=jdbc:mysql://localhost:3306/goods_db_1?characterEncoding=utf-8&useUnicode=true&useSSL=false&serverTimezone=UTC
#spring.shardingsphere.datasource.g1.username=root
#spring.shardingsphere.datasource.g1.password=123456

# 配置g2数据源具体内容————————包含  连接池，  驱动，             地址，   用户名，    密码
#                                 g2配置g2.type,g2.driver-class-name,g2.url,g2.username,g2.password
#spring.shardingsphere.datasource.g2.type=com.alibaba.druid.pool.DruidDataSource
#spring.shardingsphere.datasource.g2.driver-class-name=com.mysql.cj.jdbc.Driver
#spring.shardingsphere.datasource.g2.url=jdbc:mysql://localhost:3306/goods_db_2?characterEncoding=utf-8&useUnicode=true&useSSL=false&serverTimezone=UTC
#spring.shardingsphere.datasource.g2.username=root
#spring.shardingsphere.datasource.g2.password=123456

# 配置u0数据源具体内容————————包含  连接池，  驱动，             地址，   用户名，    密码
#                                 u0配置u0.type,u0.driver-class-name,u0.url,u0.username,u0.password
#spring.shardingsphere.datasource.u0.type=com.alibaba.druid.pool.DruidDataSource
#spring.shardingsphere.datasource.u0.driver-class-name=com.mysql.cj.jdbc.Driver
#spring.shardingsphere.datasource.u0.url=jdbc:mysql://localhost:3306/user_db?characterEncoding=utf-8&useUnicode=true&useSSL=false&serverTimezone=UTC
#spring.shardingsphere.datasource.u0.username=root
#spring.shardingsphere.datasource.u0.password=123456

# 配置公共表
#spring.shardingsphere.sharding.broadcast-tables=t_dict
# 配置公共表ID及生成策略
#spring.shardingsphere.sharding.tables.t_dict.key-generator.column=id
#spring.shardingsphere.sharding.tables.t_dict.key-generator.type=SNOWFLAKE

#配置垂直分库t_user的策略
#spring.shardingsphere.sharding.tables.t_user.actual-data-nodes=u0.t_user
#spring.shardingsphere.sharding.tables.t_user.key-generator.column=id
#spring.shardingsphere.sharding.tables.t_user.key-generator.type=SNOWFLAKE
#spring.shardingsphere.sharding.tables.t_user.table-strategy.inline.sharding-column=id
#由于只有一张表，因此在此直接写表明，不需要像水平分多个表那样写策略
#spring.shardingsphere.sharding.tables.t_user.table-strategy.inline.algorithm-expression=t_user



# 配置数据库的分布，表的分布
# g1:goods_1 goods_2; g2:goods_1,goods_2;
#spring.shardingsphere.sharding.tables.goods.actual-data-nodes=g$->{1..2}.goods_$->{1..2}

# 指定goods表 主键id 生成策略为 SNOWFLAKE
#spring.shardingsphere.sharding.tables.goods.key-generator.column=id
#spring.shardingsphere.sharding.tables.goods.key-generator.type=SNOWFLAKE

# 指定数据库分片策略 约定user_id值是偶数添加到goods_db_1中，奇数添加到goods_db_2中
#spring.shardingsphere.sharding.tables.goods.database-strategy.inline.sharding-column=user_id
#spring.shardingsphere.sharding.tables.goods.database-strategy.inline.algorithm-expression=g$->{user_id % 2 + 1}

# 指定表分片策略 约定gid值是偶数添加到goods_1表，如果gid是奇数添加到goods_2表
#spring.shardingsphere.sharding.tables.goods.table-strategy.inline.sharding-column=id
#spring.shardingsphere.sharding.tables.goods.table-strategy.inline.algorithm-expression=goods_$->{id % 2 + 1}

# 打开sql输出日志
#spring.shardingsphere.props.sql.show=true



#######################
#spring.redis.cluster.nodes=


#logging.level.com.boot.boot=debug

www.fuyuan=dev


# html模板配置
spring.thymeleaf.prefix=classpath:/templates/


# 异步线程配置
# 配置核心线程数
async.executor.thread.core_pool_size = 8
# 配置最大线程数
async.executor.thread.max_pool_size = 20
# 配置队列大小
async.executor.thread.queue_capacity = 12
# 配置线程池中的线程的名称前缀
async.executor.thread.name.prefix = xian-cheng+++++++


#spring.datasource.driverClassName=org.postgresql.Driver
#spring.datasource.driver-class-name=com.mysql.jdbc.Driver


#spring.datasource.driver-class-name=org.postgresql.Driver


#spring.datasource.url=jdbc:mysql://127.0.0.1:3306/datebook?useUnicode=true&characterEncoding=UTF-8&autoReconnect=true&useSSL=false&zeroDateTimeBehavior=convertToNull
#spring.datasource.username=root
#spring.datasource.password=root
# Hikari will use the above plus the following to setup connection pooling
# 默认
#spring.datasource.type=com.zaxxer.hikari.HikariDataSource



## 最小空闲连接数量
#spring.datasource.hikari.minimum-idle=5
#spring.datasource.hikari.maximum-pool-size=15

## 此属性控制从池返回的连接的默认自动提交行为,默认值：true
#spring.datasource.hikari.auto-commit=true


## 空闲连接存活最大时间，默认600000（10分钟
#spring.datasource.hikari.idle-timeout=30000

#名字
#spring.datasource.hikari.pool-name=DatebookHikariCP


## 此属性控制池中连接的最长生命周期，值0表示无限生命周期，默认1800000即30分钟
#spring.datasource.hikari.max-lifetime=1800000



## 数据库连接超时时间,默认30秒，即30000
#spring.datasource.hikari.connection-timeout=30000
#spring.datasource.hikari.connection-test-query=SELECT 1
